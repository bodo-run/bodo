name: AI Loop

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run"
        required: true
        default: "main"
      attempts:
        description: "Max attempts"
        default: "40"
        type: number
      pr-on-fail:
        description: "Create a PR on failure"
        default: false
        type: boolean
      provider:
        description: "AI provider"
        default: "fireworks"
        required: true
        type: choice
        options:
          - openai
          - fireworks

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  loop:
    name: AI Loop
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      MAX_ATTEMPTS: ${{ github.event.inputs.attempts }}
      CARGO_TERM_COLOR: always
      RUSTFLAGS: "-Cinstrument-coverage"
      LLVM_PROFILE_FILE: "coverage/bodo-%p-%m.profraw"
      BRANCH: ${{ github.event.inputs.branch }}
      AI_PROVIDER: ${{ github.event.inputs.provider }}

    steps:
      - name: Print inputs
        run: |
          echo "MAX_ATTEMPTS=${{ env.MAX_ATTEMPTS }}"

      - name: Install Bodo
        run: curl -fsSL https://bodo.run/bodo.sh | bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Yek
        run: |
          curl -fsSL https://bodo.run/yek.sh | bash

      - name: Install llvm-cov
        run: cargo +stable install cargo-llvm-cov --locked

      - name: Run AI Loop
        id: ai_loop
        timeout-minutes: 360
        continue-on-error: true
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FIREWORKS_AI_API_KEY: ${{ secrets.FIREWORKS_AI_API_KEY }}
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          AI_PROVIDER: ${{ env.AI_PROVIDER }}
          BASE_BRANCH: ${{ env.BRANCH }}
          FIX_BRANCH: ${{ env.BRANCH }}-ai-loop-${{ github.run_id }}
        run: |
          git checkout -b $FIX_BRANCH
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "===== Attempt $i ====="
            deno run --allow-all scripts/ai/main.ts
            git add -A
            git commit -m "AI Loop attempt $i"
            git push origin $FIX_BRANCH
            echo "last_attempt=${i}" >> "$GITHUB_OUTPUT"
          done
          echo "success=${SUCCESS}" >> "$GITHUB_OUTPUT"

      - name: Create PR or Issue
        if: always() && ${{ github.event.inputs.pr-on-fail }}
        uses: peter-evans/create-pull-request@v5
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
        with:
          token: ${{ env.GH_TOKEN }}
          commit-message: "AI Loop"
          title: "AI tests for `${{ env.BRANCH }}` branch"
          body: |
            - Successful: ${{ steps.ai_loop.outputs.success != 0 }}
            - Attempts: `${{ steps.ai_loop.outputs.last_attempt }} / ${{ env.MAX_ATTEMPTS }}`
            - [View run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          branch: ${{ env.BRANCH }}-ai-loop-${{ github.run_id }}
          base: ${{ env.BRANCH }}
