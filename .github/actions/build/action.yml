name: Build
description: Build bodo across different platforms

inputs:
  target:
    required: true
    description: "The target triple to build for"

outputs:
  binary_path:
    description: "Path to the built binary"
    value: ${{ steps.get_binary_path.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ inputs.target }}

    - name: Install cross (for Linux GNU)
      if: >
        runner.os == 'Linux' &&
        contains(inputs.target, 'linux') &&
        contains(inputs.target, 'gnu')
      shell: bash
      run: cargo install cross

    - name: Install musl tools (Linux musl)
      if: >
        runner.os == 'Linux' &&
        contains(inputs.target, 'musl')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        if [[ "${{ inputs.target }}" == "aarch64"* ]]; then
          sudo apt-get install -y musl-dev musl-tools
          git clone https://github.com/richfelker/musl-cross-make.git
          cd musl-cross-make
          echo "TARGET = aarch64-linux-musl" > config.mak
          echo "OUTPUT = /usr/local" >> config.mak
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf musl-cross-make
        fi

    - name: Build with cross (Linux GNU)
      if: >
        runner.os == 'Linux' &&
        contains(inputs.target, 'linux') &&
        contains(inputs.target, 'gnu')
      shell: bash
      run: cross build --release --target ${{ inputs.target }}

    - name: Build with cross (Linux MUSL)
      if: >
        runner.os == 'Linux' &&
        contains(inputs.target, 'linux') &&
        contains(inputs.target, 'musl')
      shell: bash
      run: |
        if [[ "${{ inputs.target }}" == "aarch64"* ]]; then
          export CC=aarch64-linux-musl-gcc
          export AR=aarch64-linux-musl-ar
          export RUSTFLAGS="-C linker=aarch64-linux-musl-gcc"
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_SYSROOT_DIR=/usr/local/aarch64-linux-musl
          export PKG_CONFIG_PATH=/usr/local/aarch64-linux-musl/lib/pkgconfig
          git clone https://github.com/openssl/openssl.git
          cd openssl
          ./Configure linux-aarch64 --prefix=/usr/local/aarch64-linux-musl no-shared
          make -j$(nproc)
          sudo make install
          cd ..
          rm -rf openssl
        else
          export CC=musl-gcc
        fi
        cargo build --release --target ${{ inputs.target }}

    - name: Build natively (macOS/Windows)
      if: runner.os != 'Linux'
      shell: bash
      run: cargo build --release --target ${{ inputs.target }}

    - name: Get binary path (Unix)
      if: runner.os != 'Windows'
      id: unix_path
      shell: bash
      run: echo "path=target/${{ inputs.target }}/release/bodo" >> $GITHUB_OUTPUT

    - name: Get binary path (Windows)
      if: runner.os == 'Windows'
      id: windows_path
      shell: pwsh
      run: echo "path=target\\${{ inputs.target }}\\release\\bodo.exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Final path
      id: get_binary_path
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "path=${{ steps.windows_path.outputs.path }}" >> $GITHUB_OUTPUT
        else
          echo "path=${{ steps.unix_path.outputs.path }}" >> $GITHUB_OUTPUT
        fi
